generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())  // Use Int for IDs with auto increment
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  role       Role        @default(client)
  createdAt  DateTime    @default(now())  
  posts      Post[]      // Relation to Post model
  savedPosts SavedPost[] // Relation to SavedPost model
  chats      ChatUser[]  // Join table for many-to-many relation with Chat

  // ðŸ‘‡ Add these agency-specific fields
  agencyName String?
  phone      String?
  location   String?
  website    String?
  about      String?

  tourRequestsAsClient TourRequest[] @relation("ClientTourRequests")
  tourRequestsAsAgency TourRequest[] @relation("AgencyTourRequests")
}

enum Role {
  client
  agency
  admin
}

model Post {
  id         Int         @id @default(autoincrement())
  title      String
  price      Int
  images     Json        // Store image URLs as a JSON array
  address    String
  city       String
  district   String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  propertyType PropertyType
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  postDetail PostDetail?
  savedPosts SavedPost[] // Relation to SavedPost model
  tourRequests TourRequest[]
}

enum Type {
  buy
  rent
}

enum Property {
  commercial
  residential
}

enum PropertyType {
  // Commercial Types
  office
  retail
  hospitality
  industrial

  // Residential Types
  apartment
  individual_house
  traditional_house
  other_residential
}


model PostDetail {
  id         Int     @id @default(autoincrement())
  desc       String
  utilities  String?
  pet        String?
  size       Int?
  Furnished  String?
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int     @unique
  views      Int         @default(0) // ðŸ‘ˆ Add this line
  Matricule  String?
  
    // New Nearby Facilities
  primarySchool     String?
  kindergarten      String?
  university        String?
  carPark           String?
  transportation    String?
  highSchool        String?
  middleSchool      String?
  mosque            String?
  pharmacy          String?
  commercialArea        String?
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Composite unique constraint
}

// Many-to-many join table for users and chats
model Chat {
  id         Int         @id @default(autoincrement())  // Use Int for ID with auto increment
  createdAt  DateTime    @default(now())
  lastMessage String?
  messages   Message[]   // Relation to Message model
  users      ChatUser[]  // Join table for users
}

model ChatUser {
  chatId Int
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatId, userId])
}


model Message {
  id        Int     @id @default(autoincrement())
  text      String
  userId    Int
  chatId    Int
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model TourRequest {
  id             Int               @id @default(autoincrement())
  propertyId     Int
  clientId       Int
  agencyId       Int
  preferredDate  String
  preferredTime  String
  contactPhone   String
  message        String?
  status         TourRequestStatus @default(pending)
  confirmedDate  String?
  confirmedTime  String?
  declineReason  String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  property       Post  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  client         User  @relation("ClientTourRequests", fields: [clientId], references: [id], onDelete: Cascade)
  agency         User  @relation("AgencyTourRequests", fields: [agencyId], references: [id], onDelete: Cascade)
}

enum TourRequestStatus {
  pending
  confirmed
  declined
  completed
  cancelled
}